# coding: utf-8

"""
    LaunchDarkly REST API

    Build custom integrations with the LaunchDarkly REST API

    OpenAPI spec version: 2.0.0
    Contact: support@launchdarkly.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UserSettingsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_user_flag_setting(self, project_key, environment_key, user_key, feature_flag_key, **kwargs):
        """
        Get a user by key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_flag_setting(project_key, environment_key, user_key, feature_flag_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key (required)
        :param str user_key: The user's key (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :return: UserFlagSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_flag_setting_with_http_info(project_key, environment_key, user_key, feature_flag_key, **kwargs)
        else:
            (data) = self.get_user_flag_setting_with_http_info(project_key, environment_key, user_key, feature_flag_key, **kwargs)
            return data

    def get_user_flag_setting_with_http_info(self, project_key, environment_key, user_key, feature_flag_key, **kwargs):
        """
        Get a user by key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_flag_setting_with_http_info(project_key, environment_key, user_key, feature_flag_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key (required)
        :param str user_key: The user's key (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :return: UserFlagSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'environment_key', 'user_key', 'feature_flag_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_flag_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params) or (params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_user_flag_setting`")
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params) or (params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `get_user_flag_setting`")
        # verify the required parameter 'user_key' is set
        if ('user_key' not in params) or (params['user_key'] is None):
            raise ValueError("Missing the required parameter `user_key` when calling `get_user_flag_setting`")
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params) or (params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `get_user_flag_setting`")


        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']
        if 'user_key' in params:
            path_params['userKey'] = params['user_key']
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api('/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserFlagSetting',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user_flag_settings(self, project_key, environment_key, user_key, **kwargs):
        """
        Fetch a single flag setting for a user by key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_flag_settings(project_key, environment_key, user_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key (required)
        :param str user_key: The user's key (required)
        :return: UserFlagSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_flag_settings_with_http_info(project_key, environment_key, user_key, **kwargs)
        else:
            (data) = self.get_user_flag_settings_with_http_info(project_key, environment_key, user_key, **kwargs)
            return data

    def get_user_flag_settings_with_http_info(self, project_key, environment_key, user_key, **kwargs):
        """
        Fetch a single flag setting for a user by key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_flag_settings_with_http_info(project_key, environment_key, user_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key (required)
        :param str user_key: The user's key (required)
        :return: UserFlagSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'environment_key', 'user_key']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_flag_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params) or (params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `get_user_flag_settings`")
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params) or (params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `get_user_flag_settings`")
        # verify the required parameter 'user_key' is set
        if ('user_key' not in params) or (params['user_key'] is None):
            raise ValueError("Missing the required parameter `user_key` when calling `get_user_flag_settings`")


        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']
        if 'user_key' in params:
            path_params['userKey'] = params['user_key']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api('/users/{projectKey}/{environmentKey}/{userKey}/flags', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserFlagSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_flag_setting(self, project_key, environment_key, user_key, feature_flag_key, user_settings_body, **kwargs):
        """
        Specifically enable or disable a feature flag for a user based on their key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_flag_setting(project_key, environment_key, user_key, feature_flag_key, user_settings_body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key (required)
        :param str user_key: The user's key (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param UserSettingsBody user_settings_body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_flag_setting_with_http_info(project_key, environment_key, user_key, feature_flag_key, user_settings_body, **kwargs)
        else:
            (data) = self.put_flag_setting_with_http_info(project_key, environment_key, user_key, feature_flag_key, user_settings_body, **kwargs)
            return data

    def put_flag_setting_with_http_info(self, project_key, environment_key, user_key, feature_flag_key, user_settings_body, **kwargs):
        """
        Specifically enable or disable a feature flag for a user based on their key.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_flag_setting_with_http_info(project_key, environment_key, user_key, feature_flag_key, user_settings_body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str project_key: The project key, used to tie the flags together under one project so they can be managed together. (required)
        :param str environment_key: The environment key (required)
        :param str user_key: The user's key (required)
        :param str feature_flag_key: The feature flag's key. The key identifies the flag in your code. (required)
        :param UserSettingsBody user_settings_body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_key', 'environment_key', 'user_key', 'feature_flag_key', 'user_settings_body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_flag_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_key' is set
        if ('project_key' not in params) or (params['project_key'] is None):
            raise ValueError("Missing the required parameter `project_key` when calling `put_flag_setting`")
        # verify the required parameter 'environment_key' is set
        if ('environment_key' not in params) or (params['environment_key'] is None):
            raise ValueError("Missing the required parameter `environment_key` when calling `put_flag_setting`")
        # verify the required parameter 'user_key' is set
        if ('user_key' not in params) or (params['user_key'] is None):
            raise ValueError("Missing the required parameter `user_key` when calling `put_flag_setting`")
        # verify the required parameter 'feature_flag_key' is set
        if ('feature_flag_key' not in params) or (params['feature_flag_key'] is None):
            raise ValueError("Missing the required parameter `feature_flag_key` when calling `put_flag_setting`")
        # verify the required parameter 'user_settings_body' is set
        if ('user_settings_body' not in params) or (params['user_settings_body'] is None):
            raise ValueError("Missing the required parameter `user_settings_body` when calling `put_flag_setting`")


        collection_formats = {}

        path_params = {}
        if 'project_key' in params:
            path_params['projectKey'] = params['project_key']
        if 'environment_key' in params:
            path_params['environmentKey'] = params['environment_key']
        if 'user_key' in params:
            path_params['userKey'] = params['user_key']
        if 'feature_flag_key' in params:
            path_params['featureFlagKey'] = params['feature_flag_key']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_settings_body' in params:
            body_params = params['user_settings_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['Token']

        return self.api_client.call_api('/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
