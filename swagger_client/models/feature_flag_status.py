# coding: utf-8

"""
    LaunchDarkly REST API

    Build custom integrations with the LaunchDarkly REST API

    OpenAPI spec version: 2.0.0
    Contact: support@launchdarkly.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FeatureFlagStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'Links',
        'name': 'str',
        'last_requested': 'int',
        'default': 'bool'
    }

    attribute_map = {
        'links': '_links',
        'name': 'name',
        'last_requested': 'lastRequested',
        'default': 'default'
    }

    def __init__(self, links=None, name=None, last_requested=None, default=None):
        """
        FeatureFlagStatus - a model defined in Swagger
        """

        self._links = None
        self._name = None
        self._last_requested = None
        self._default = None

        if links is not None:
          self.links = links
        if name is not None:
          self.name = name
        if last_requested is not None:
          self.last_requested = last_requested
        if default is not None:
          self.default = default

    @property
    def links(self):
        """
        Gets the links of this FeatureFlagStatus.

        :return: The links of this FeatureFlagStatus.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this FeatureFlagStatus.

        :param links: The links of this FeatureFlagStatus.
        :type: Links
        """

        self._links = links

    @property
    def name(self):
        """
        Gets the name of this FeatureFlagStatus.

        :return: The name of this FeatureFlagStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FeatureFlagStatus.

        :param name: The name of this FeatureFlagStatus.
        :type: str
        """

        self._name = name

    @property
    def last_requested(self):
        """
        Gets the last_requested of this FeatureFlagStatus.

        :return: The last_requested of this FeatureFlagStatus.
        :rtype: int
        """
        return self._last_requested

    @last_requested.setter
    def last_requested(self, last_requested):
        """
        Sets the last_requested of this FeatureFlagStatus.

        :param last_requested: The last_requested of this FeatureFlagStatus.
        :type: int
        """

        self._last_requested = last_requested

    @property
    def default(self):
        """
        Gets the default of this FeatureFlagStatus.

        :return: The default of this FeatureFlagStatus.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """
        Sets the default of this FeatureFlagStatus.

        :param default: The default of this FeatureFlagStatus.
        :type: bool
        """

        self._default = default

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FeatureFlagStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
