# coding: utf-8

"""
    LaunchDarkly REST API

    Build custom integrations with the LaunchDarkly REST API

    OpenAPI spec version: 2.0.0
    Contact: support@launchdarkly.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AuditLogEntry(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'Links',
        'id': 'str',
        'date': 'float',
        'kind': 'str',
        'name': 'str',
        'description': 'str',
        'member': 'Member',
        'title_verb': 'str',
        'title': 'str',
        'target': 'AuditLogEntryTarget'
    }

    attribute_map = {
        'links': '_links',
        'id': '_id',
        'date': 'date',
        'kind': 'kind',
        'name': 'name',
        'description': 'description',
        'member': 'member',
        'title_verb': 'titleVerb',
        'title': 'title',
        'target': 'target'
    }

    def __init__(self, links=None, id=None, date=None, kind=None, name=None, description=None, member=None, title_verb=None, title=None, target=None):
        """
        AuditLogEntry - a model defined in Swagger
        """

        self._links = None
        self._id = None
        self._date = None
        self._kind = None
        self._name = None
        self._description = None
        self._member = None
        self._title_verb = None
        self._title = None
        self._target = None

        if links is not None:
          self.links = links
        if id is not None:
          self.id = id
        if date is not None:
          self.date = date
        if kind is not None:
          self.kind = kind
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if member is not None:
          self.member = member
        if title_verb is not None:
          self.title_verb = title_verb
        if title is not None:
          self.title = title
        if target is not None:
          self.target = target

    @property
    def links(self):
        """
        Gets the links of this AuditLogEntry.

        :return: The links of this AuditLogEntry.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this AuditLogEntry.

        :param links: The links of this AuditLogEntry.
        :type: Links
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this AuditLogEntry.

        :return: The id of this AuditLogEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AuditLogEntry.

        :param id: The id of this AuditLogEntry.
        :type: str
        """

        self._id = id

    @property
    def date(self):
        """
        Gets the date of this AuditLogEntry.

        :return: The date of this AuditLogEntry.
        :rtype: float
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this AuditLogEntry.

        :param date: The date of this AuditLogEntry.
        :type: float
        """

        self._date = date

    @property
    def kind(self):
        """
        Gets the kind of this AuditLogEntry.

        :return: The kind of this AuditLogEntry.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """
        Sets the kind of this AuditLogEntry.

        :param kind: The kind of this AuditLogEntry.
        :type: str
        """

        self._kind = kind

    @property
    def name(self):
        """
        Gets the name of this AuditLogEntry.

        :return: The name of this AuditLogEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AuditLogEntry.

        :param name: The name of this AuditLogEntry.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this AuditLogEntry.

        :return: The description of this AuditLogEntry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AuditLogEntry.

        :param description: The description of this AuditLogEntry.
        :type: str
        """

        self._description = description

    @property
    def member(self):
        """
        Gets the member of this AuditLogEntry.

        :return: The member of this AuditLogEntry.
        :rtype: Member
        """
        return self._member

    @member.setter
    def member(self, member):
        """
        Sets the member of this AuditLogEntry.

        :param member: The member of this AuditLogEntry.
        :type: Member
        """

        self._member = member

    @property
    def title_verb(self):
        """
        Gets the title_verb of this AuditLogEntry.

        :return: The title_verb of this AuditLogEntry.
        :rtype: str
        """
        return self._title_verb

    @title_verb.setter
    def title_verb(self, title_verb):
        """
        Sets the title_verb of this AuditLogEntry.

        :param title_verb: The title_verb of this AuditLogEntry.
        :type: str
        """

        self._title_verb = title_verb

    @property
    def title(self):
        """
        Gets the title of this AuditLogEntry.

        :return: The title of this AuditLogEntry.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this AuditLogEntry.

        :param title: The title of this AuditLogEntry.
        :type: str
        """

        self._title = title

    @property
    def target(self):
        """
        Gets the target of this AuditLogEntry.

        :return: The target of this AuditLogEntry.
        :rtype: AuditLogEntryTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this AuditLogEntry.

        :param target: The target of this AuditLogEntry.
        :type: AuditLogEntryTarget
        """

        self._target = target

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AuditLogEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
