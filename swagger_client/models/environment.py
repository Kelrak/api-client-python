# coding: utf-8

"""
    LaunchDarkly REST API

    Build custom integrations with the LaunchDarkly REST API

    OpenAPI spec version: 2.0.0
    Contact: support@launchdarkly.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Environment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'Links',
        'id': 'str',
        'key': 'str',
        'name': 'str',
        'api_key': 'str',
        'mobile_key': 'str',
        'color': 'str',
        'default_ttl': 'float',
        'secure_mode': 'bool'
    }

    attribute_map = {
        'links': '_links',
        'id': '_id',
        'key': 'key',
        'name': 'name',
        'api_key': 'apiKey',
        'mobile_key': 'mobileKey',
        'color': 'color',
        'default_ttl': 'defaultTtl',
        'secure_mode': 'secureMode'
    }

    def __init__(self, links=None, id=None, key=None, name=None, api_key=None, mobile_key=None, color=None, default_ttl=None, secure_mode=None):
        """
        Environment - a model defined in Swagger
        """

        self._links = None
        self._id = None
        self._key = None
        self._name = None
        self._api_key = None
        self._mobile_key = None
        self._color = None
        self._default_ttl = None
        self._secure_mode = None

        if links is not None:
          self.links = links
        if id is not None:
          self.id = id
        if key is not None:
          self.key = key
        if name is not None:
          self.name = name
        if api_key is not None:
          self.api_key = api_key
        if mobile_key is not None:
          self.mobile_key = mobile_key
        if color is not None:
          self.color = color
        if default_ttl is not None:
          self.default_ttl = default_ttl
        if secure_mode is not None:
          self.secure_mode = secure_mode

    @property
    def links(self):
        """
        Gets the links of this Environment.

        :return: The links of this Environment.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this Environment.

        :param links: The links of this Environment.
        :type: Links
        """

        self._links = links

    @property
    def id(self):
        """
        Gets the id of this Environment.
        The unique id for the environment

        :return: The id of this Environment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Environment.
        The unique id for the environment

        :param id: The id of this Environment.
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """
        Gets the key of this Environment.
        The key for the environment

        :return: The key of this Environment.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this Environment.
        The key for the environment

        :param key: The key of this Environment.
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """
        Gets the name of this Environment.
        The name of the environment

        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Environment.
        The name of the environment

        :param name: The name of this Environment.
        :type: str
        """

        self._name = name

    @property
    def api_key(self):
        """
        Gets the api_key of this Environment.
        The SDK key for backend LaunchDarkly SDKs

        :return: The api_key of this Environment.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """
        Sets the api_key of this Environment.
        The SDK key for backend LaunchDarkly SDKs

        :param api_key: The api_key of this Environment.
        :type: str
        """

        self._api_key = api_key

    @property
    def mobile_key(self):
        """
        Gets the mobile_key of this Environment.
        The SDK key for mobile LaunchDarkly SDKs

        :return: The mobile_key of this Environment.
        :rtype: str
        """
        return self._mobile_key

    @mobile_key.setter
    def mobile_key(self, mobile_key):
        """
        Sets the mobile_key of this Environment.
        The SDK key for mobile LaunchDarkly SDKs

        :param mobile_key: The mobile_key of this Environment.
        :type: str
        """

        self._mobile_key = mobile_key

    @property
    def color(self):
        """
        Gets the color of this Environment.
        The swatch color for the environment

        :return: The color of this Environment.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this Environment.
        The swatch color for the environment

        :param color: The color of this Environment.
        :type: str
        """

        self._color = color

    @property
    def default_ttl(self):
        """
        Gets the default_ttl of this Environment.
        The default TTL

        :return: The default_ttl of this Environment.
        :rtype: float
        """
        return self._default_ttl

    @default_ttl.setter
    def default_ttl(self, default_ttl):
        """
        Sets the default_ttl of this Environment.
        The default TTL

        :param default_ttl: The default_ttl of this Environment.
        :type: float
        """

        self._default_ttl = default_ttl

    @property
    def secure_mode(self):
        """
        Gets the secure_mode of this Environment.
        Determines if this environment is in safe mode

        :return: The secure_mode of this Environment.
        :rtype: bool
        """
        return self._secure_mode

    @secure_mode.setter
    def secure_mode(self, secure_mode):
        """
        Sets the secure_mode of this Environment.
        Determines if this environment is in safe mode

        :param secure_mode: The secure_mode of this Environment.
        :type: bool
        """

        self._secure_mode = secure_mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Environment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
