# coding: utf-8

"""
    LaunchDarkly REST API

    Build custom integrations with the LaunchDarkly REST API

    OpenAPI spec version: 2.0.0
    Contact: support@launchdarkly.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FeatureFlagBody(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'key': 'str',
        'variations': 'list[Variation]',
        'temporary': 'bool',
        'tags': 'list[str]',
        'include_in_snippet': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'key': 'key',
        'variations': 'variations',
        'temporary': 'temporary',
        'tags': 'tags',
        'include_in_snippet': 'includeInSnippet'
    }

    def __init__(self, name=None, key=None, variations=None, temporary=None, tags=None, include_in_snippet=None):
        """
        FeatureFlagBody - a model defined in Swagger
        """

        self._name = None
        self._key = None
        self._variations = None
        self._temporary = None
        self._tags = None
        self._include_in_snippet = None

        self.name = name
        self.key = key
        self.variations = variations
        if temporary is not None:
          self.temporary = temporary
        if tags is not None:
          self.tags = tags
        if include_in_snippet is not None:
          self.include_in_snippet = include_in_snippet

    @property
    def name(self):
        """
        Gets the name of this FeatureFlagBody.
        A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.

        :return: The name of this FeatureFlagBody.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FeatureFlagBody.
        A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.

        :param name: The name of this FeatureFlagBody.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def key(self):
        """
        Gets the key of this FeatureFlagBody.
        A unique key that will be used to reference the flag in your code

        :return: The key of this FeatureFlagBody.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this FeatureFlagBody.
        A unique key that will be used to reference the flag in your code

        :param key: The key of this FeatureFlagBody.
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def variations(self):
        """
        Gets the variations of this FeatureFlagBody.
        An array of possible variations for the flag.

        :return: The variations of this FeatureFlagBody.
        :rtype: list[Variation]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """
        Sets the variations of this FeatureFlagBody.
        An array of possible variations for the flag.

        :param variations: The variations of this FeatureFlagBody.
        :type: list[Variation]
        """
        if variations is None:
            raise ValueError("Invalid value for `variations`, must not be `None`")

        self._variations = variations

    @property
    def temporary(self):
        """
        Gets the temporary of this FeatureFlagBody.
        Whether or not the flag is a temporary flag

        :return: The temporary of this FeatureFlagBody.
        :rtype: bool
        """
        return self._temporary

    @temporary.setter
    def temporary(self, temporary):
        """
        Sets the temporary of this FeatureFlagBody.
        Whether or not the flag is a temporary flag

        :param temporary: The temporary of this FeatureFlagBody.
        :type: bool
        """

        self._temporary = temporary

    @property
    def tags(self):
        """
        Gets the tags of this FeatureFlagBody.
        Tags for the feature flag

        :return: The tags of this FeatureFlagBody.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this FeatureFlagBody.
        Tags for the feature flag

        :param tags: The tags of this FeatureFlagBody.
        :type: list[str]
        """

        self._tags = tags

    @property
    def include_in_snippet(self):
        """
        Gets the include_in_snippet of this FeatureFlagBody.
        Whether or not this flag should be made available to the client-side JavaScript SDK

        :return: The include_in_snippet of this FeatureFlagBody.
        :rtype: bool
        """
        return self._include_in_snippet

    @include_in_snippet.setter
    def include_in_snippet(self, include_in_snippet):
        """
        Sets the include_in_snippet of this FeatureFlagBody.
        Whether or not this flag should be made available to the client-side JavaScript SDK

        :param include_in_snippet: The include_in_snippet of this FeatureFlagBody.
        :type: bool
        """

        self._include_in_snippet = include_in_snippet

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FeatureFlagBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
